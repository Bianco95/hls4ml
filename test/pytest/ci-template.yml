.pytest:
  stage: test
  image: gitlab-registry.cern.ch/fastmachinelearning/hls4ml-testing:0.6.1.base
  tags:
    - k8s-default
  before_script:
    - eval "$(conda shell.bash hook)"
    - conda activate hls4ml-testing
    - source /opt/intel/oneapi/setvars.sh --force
    - git config --global --add safe.directory /builds/fastmachinelearning/hls4ml
    - git submodule update --init --recursive hls4ml/templates/catapult/
    - git submodule update --init --recursive test/pytest/
    - if [ $EXAMPLEMODEL == 1 ]; then git submodule update --init example-models; fi
    - pip install .[testing,sr,optimization]
    - dnf -y install epel-release
    - dnf -y install apptainer
    - apptainer --version
    - export RUN_SYNTHESIS=true
    - export TOOL_VERSION=2020.1
    - mkdir -p cmd_vivado_${TOOL_VERSION}
    - echo '#!/bin/bash' > cmd_vivado_${TOOL_VERSION}/vivado_hls
    - echo "apptainer exec /cvmfs/projects.cern.ch/hls4ml/vivado/2020.1_v1/vivado-2020.1_v1/ vivado_hls \"\$@\"" >> cmd_vivado_${TOOL_VERSION}/vivado_hls
    - chmod +x cmd_vivado_${TOOL_VERSION}/vivado_hls
    - export PATH=$PWD/cmd_vivado_${TOOL_VERSION}:$PATH
    - which vivado_hls
    - vivado_hls -version
  script:
    - cd test/pytest
    - pytest -s $PYTESTFILE -rA --cov-report xml --cov-report term --cov=hls4ml --junitxml=report.xml --randomly-seed=42 --randomly-dont-reorganize --randomly-dont-reset-seed
  artifacts:
    when: always
    reports:
      junit:
        - test/pytest/report.xml
      coverage_report:
        coverage_format: cobertura
        path: test/pytest/coverage.xml
    paths:
      - test/pytest/hls4mlprj*.tar.gz
      - test/pytest/synthesis_report_*.json

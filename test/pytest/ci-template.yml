.pytest:
  stage: test
  image: gitlab-registry.cern.ch/fastmachinelearning/hls4ml-testing:0.6.1.base
  tags:
    - k8s-default
  before_script:
    - eval "$(conda shell.bash hook)"
    - conda activate hls4ml-testing
    - source /opt/intel/oneapi/setvars.sh --force
    - git config --global --add safe.directory /builds/fastmachinelearning/hls4ml
    - git submodule update --init --recursive hls4ml/templates/catapult/
    - git submodule update --init --recursive test/pytest/
    - if [ $EXAMPLEMODEL == 1 ]; then git submodule update --init example-models; fi
    - pip install .[testing,sr,optimization]
    - sudo yum install libtinfo.so.6 -y
    - sudo ln -s /lib64/libtinfo.so.6 /lib64/libtinfo.so.5
    - sudo ln -s /cvmfs/projects.cern.ch/hls4ml/vivado/2020.1_v1/vivado-2020.1_v1/opt/Xilinx /opt/Xilinx
    - source /opt/Xilinx/Vivado/2020.1/settings64.sh
    - export RUN_SYNTHESIS=true
    - export PATH=/usr/bin:$PATH
    - which cmake
    - cmake --version
    - ldd $(which cmake)
  script:
    - cd test/pytest
    - pytest $PYTESTFILE -rA --cov-report xml --cov-report term --cov=hls4ml --junitxml=report.xml --randomly-seed=42 --randomly-dont-reorganize --randomly-dont-reset-seed
  artifacts:
    when: always
    reports:
      junit:
        - test/pytest/report.xml
      coverage_report:
        coverage_format: cobertura
        path: test/pytest/coverage.xml
    paths:
      - test/pytest/hls4mlprj*.tar.gz
      - test/pytest/synthesis_report_*.json

import hls4ml
from pathlib import Path
from Layernamefolder.layername import parse_layername_layer
from Layernamefolder.layername import Layername
from Layernamefolder.layername import LayernameConfigTemplate
from Layernamefolder.layername import LayernameFunctionTemplate
from hls4ml.converters import get_supported_keras_layers


if 'Layername' not in get_supported_keras_layers():
	# Register the converter for custom Layername
	hls4ml.converters.register_keras_layer_handler('Layername', parse_layername_layer)
	# Register the hls4ml's IR layer
	hls4ml.model.layers.register_layer('Layername', Layername)
	# Register the optimization passes (if any)
	backend = hls4ml.backends.get_backend('Vivado')
	# Register template passes for the given backend
	backend.register_template(LayernameConfigTemplate)
	backend.register_template(LayernameFunctionTemplate)
	# Register HLS implementation
	p = Path(__file__).parent / 'nnet_layername.h'
	backend.register_source(p)
	print("Instance Normalization layer registered in hls4ml")

